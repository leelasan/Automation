Sub SendPolicyRequests()
    Dim wsConfig As Worksheet
    Dim wsPolicyData As Worksheet
    Dim wsNodeMapping As Worksheet
    Dim wsAttributeMapping As Worksheet
    Dim xmlTemplatePath As String
    Dim endpointUrl As String
    Dim tokenUrl As String
    Dim saveFolder As String
    Dim userId As String
    Dim password As String
    Dim token As String
    Dim lastRow As Long, i As Long
    Dim updatedXml As String
    Dim xmlDoc As Object
    Dim outputFilePath As String
    Dim responseText As String
    Dim encodedXml As String
    Dim jsonPayload As String
    Dim xmlHttp As Object
    Dim nsMgr As Object ' Namespace Manager
    
    ' Set worksheet references
    Set wsConfig = ThisWorkbook.Sheets("Config")
    Set wsPolicyData = ThisWorkbook.Sheets("PolicyData")
    Set wsNodeMapping = ThisWorkbook.Sheets("NodeMapping")
    Set wsAttributeMapping = ThisWorkbook.Sheets("AttributeMapping")
    
    ' Read configuration values from the "Config" sheet
    endpointUrl = wsConfig.Range("B2").Value ' Policy endpoint URL
    tokenUrl = wsConfig.Range("B3").Value ' Token endpoint URL
    xmlTemplatePath = wsConfig.Range("B4").Value ' Path to XML template
    saveFolder = wsConfig.Range("B5").Value ' Folder path to save modified XMLs
    userId = wsConfig.Range("B6").Value ' User ID for token
    password = wsConfig.Range("B7").Value ' Password for token
    
    ' Get the last row in the "PolicyData" sheet
    lastRow = wsPolicyData.Cells(wsPolicyData.Rows.Count, 1).End(xlUp).Row

    ' Loop through each row in the "PolicyData" sheet
    For i = 2 To lastRow
        ' Load the XML template
        Set xmlDoc = CreateObject("MSXML2.DOMDocument.6.0")
        xmlDoc.async = False
        xmlDoc.Load xmlTemplatePath
        
        ' Create Namespace Manager
        Set nsMgr = xmlDoc.createNamespaceManager
        nsMgr.AddNamespace "ac", "http://ACORD.org/Standards/Life/2"

        ' =====================
        ' Update XML Nodes with Values
        ' =====================
        Dim nodeLastRow As Long, j As Long
        nodeLastRow = wsNodeMapping.Cells(wsNodeMapping.Rows.Count, 1).End(xlUp).Row
        
        For j = 2 To nodeLastRow
            Dim nodeXPath As String
            Dim columnName As String
            Dim columnValue As String
            Dim node As Object
            Dim nodeList As Object
            
            nodeXPath = wsNodeMapping.Cells(j, 1).Value ' XPath from NodeMapping sheet
            columnName = wsNodeMapping.Cells(j, 2).Value ' Column name in PolicyData sheet
            columnValue = wsPolicyData.Cells(i, GetColumnNumberByHeader(wsPolicyData, columnName)).Value
            
            ' Check if XPath contains positional indices
            If InStr(nodeXPath, "[") > 0 Then
                ' Use SelectNodes and handle positional indices
                Set nodeList = xmlDoc.SelectNodes(nodeXPath, nsMgr)
                
                If Not nodeList Is Nothing Then
                    For Each node In nodeList
                        node.Text = columnValue ' Update node value
                        Debug.Print "Updated node: " & nodeXPath & " with value: " & columnValue
                    Next node
                Else
                    Debug.Print "Nodes not found: " & nodeXPath
                End If
            Else
                ' Use SelectSingleNode if there are no positional indices
                Set node = xmlDoc.SelectSingleNode(nodeXPath, nsMgr)
                
                If Not node Is Nothing Then
                    node.Text = columnValue ' Update node value
                    Debug.Print "Updated node: " & nodeXPath & " with value: " & columnValue
                Else
                    Debug.Print "Node not found: " & nodeXPath
                End If
            End If
        Next j
        
        ' =====================
        ' Update Attributes
        ' =====================
        Dim attrLastRow As Long, k As Long
        attrLastRow = wsAttributeMapping.Cells(wsAttributeMapping.Rows.Count, 1).End(xlUp).Row
        
        For k = 2 To attrLastRow
            Dim attrXPath As String
            Dim attrName As String
            Dim attrColumnName As String
            Dim attrValue As String
            Dim attrNode As Object
            Dim nodeList As Object
            
            attrXPath = wsAttributeMapping.Cells(k, 1).Value ' XPath from AttributeMapping sheet
            attrName = wsAttributeMapping.Cells(k, 2).Value ' Attribute name
            attrColumnName = wsAttributeMapping.Cells(k, 3).Value ' Column name in PolicyData sheet
            attrValue = wsPolicyData.Cells(i, GetColumnNumberByHeader(wsPolicyData, attrColumnName)).Value
            
            ' Check if XPath contains positional indices
            If InStr(attrXPath, "[") > 0 Then
                ' Use SelectNodes and handle positional indices
                Set nodeList = xmlDoc.SelectNodes(attrXPath, nsMgr)
                
                If Not nodeList Is Nothing Then
                    For Each attrNode In nodeList
                        attrNode.setAttribute attrName, attrValue ' Update attribute
                        Debug.Print "Updated attribute: " & attrName & " in node: " & attrXPath & " with value: " & attrValue
                    Next attrNode
                Else
                    Debug.Print "Nodes not found: " & attrXPath
                End If
            Else
                ' Use SelectSingleNode if there are no positional indices
                Set attrNode = xmlDoc.SelectSingleNode(attrXPath, nsMgr)
                
                If Not attrNode Is Nothing Then
                    attrNode.setAttribute attrName, attrValue ' Update attribute
                    Debug.Print "Updated attribute: " & attrName & " in node: " & attrXPath & " with value: " & attrValue
                Else
                    Debug.Print "Node not found for attribute: " & attrXPath
                End If
            End If
        Next k
        
        ' =====================
        ' Save and Encode Updated XML
        ' =====================
        ' Convert updated XML to string
        updatedXml = xmlDoc.xml
        
        ' Save the updated XML to a file
        outputFilePath = saveFolder & "\" & wsPolicyData.Cells(i, GetColumnNumberByHeader(wsPolicyData, "PolicyNumber")).Value & "_updated.xml"
        SaveTextToFile outputFilePath, updatedXml
        MsgBox "Saved updated XML to: " & outputFilePath
        
        ' Encode the XML in Base64
        encodedXml = EncodeBase64(updatedXml)
        MsgBox "Encoded XML: " & encodedXml
        
        ' Create JSON payload
        jsonPayload = "{""encodedACORDXml"": """ & encodedXml & """}"

        ' Get the token using the provided credentials
        token = GetToken(tokenUrl, userId, password)
        If token = "" Then
            MsgBox "Failed to retrieve token. Aborting operation."
            Exit Sub
        End If

        ' Send HTTP POST request
        Set xmlHttp = CreateObject("MSXML2.ServerXMLHTTP")
        xmlHttp.Open "POST", endpointUrl, False
        xmlHttp.SetRequestHeader "Content-Type", "application/json"
        xmlHttp.SetRequestHeader "Authorization", "Bearer " & token
        xmlHttp.Send jsonPayload

        ' Get the response
        responseText = xmlHttp.responseText
        MsgBox "Response: " & responseText

        ' Cleanup
        Set xmlDoc = Nothing
        Set xmlHttp = Nothing
    Next i
End Sub
