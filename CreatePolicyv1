import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.core5.http.ContentType;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.apache.commons.codec.binary.Base64;

import java.io.File;
import java.io.FileInputStream;
import java.nio.charset.StandardCharsets;

public class PolicyCreationTest {

    // Utility function to encode the XML file to Base64
    public String encodeXMLToBase64(String filePath) throws Exception {
        File file = new File(filePath);
        FileInputStream fis = new FileInputStream(file);
        byte[] bytes = new byte[(int) file.length()];
        fis.read(bytes);
        fis.close();
        return Base64.encodeBase64String(bytes);
    }

    // Test method for creating the policy using APIs
    @Test
    public void createPolicyTest() throws Exception {
        // Step 1: Convert XML file to Base64
        String encodedXML = encodeXMLToBase64("path/to/your/input.xml");

        // Step 2: Get bearer token
        String token = getBearerToken();

        // Step 3: Hit policy creation API with the Base64 encoded XML
        String policyNumber = createPolicy(token, encodedXML);

        // Assert that the policy number is not null or empty
        Assert.assertNotNull(policyNumber, "Policy number should not be null");
        Assert.assertFalse(policyNumber.isEmpty(), "Policy number should not be empty");
    }

    // Helper method to get bearer token
    public String getBearerToken() throws Exception {
        // Token API URL
        String tokenApiUrl = "https://your-api-url/token";

        // Prepare the payload
        String payload = "{ \"username\" : \"LVAKATI\", \"password\" : \"S123456\" }";

        // Create the HTTP POST request
        CloseableHttpClient client = HttpClients.createDefault();
        HttpPost post = new HttpPost(tokenApiUrl);

        // Set headers
        post.setHeader("Content-Type", "application/json");
        post.setHeader("X-API-KEY", "c38879f");

        // Set payload
        post.setEntity(new StringEntity(payload, ContentType.APPLICATION_JSON));

        // Execute the request
        CloseableHttpResponse response = client.execute(post);

        // Validate response code
        Assert.assertEquals(response.getCode(), 200, "Token API response code should be 200");

        // Extract response body
        String responseBody = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);
        client.close();

        // Extract the token from the response
        String token = extractTokenFromResponse(responseBody);
        return token;
    }

    // Helper method to extract token from the JSON response
    public String extractTokenFromResponse(String responseBody) {
        // Assuming the token comes in this format:
        // { "token" : "adbkjfhakjdfkad", "expires": "2024-10-21-T08:10:05Z" }
        return responseBody.split("\"token\"\\s*:\\s*\"")[1].split("\"")[0];
    }

    // Helper method to hit the policy creation API
    public String createPolicy(String token, String encodedXML) throws Exception {
        // Policy creation API URL
        String policyApiUrl = "https://your-api-url/policy";

        // Prepare the payload
        String payload = "{ \"encodedACORDXml\" : \"" + encodedXML + "\" }";

        // Create the HTTP POST request
        CloseableHttpClient client = HttpClients.createDefault();
        HttpPost post = new HttpPost(policyApiUrl);

        // Set headers
        post.setHeader("Content-Type", "application/json");
        post.setHeader("Authorization", "Bearer " + token);
        post.setHeader("X-API-KEY", "c38879f");

        // Set payload
        post.setEntity(new StringEntity(payload, ContentType.APPLICATION_JSON));

        // Execute the request
        CloseableHttpResponse response = client.execute(post);

        // Validate response code
        Assert.assertEquals(response.getCode(), 200, "Policy creation API response code should be 200");

        // Extract response body
        String responseBody = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);
        client.close();

        // Extract the Policy Number from the response
        String policyNumber = extractPolicyNumberFromResponse(responseBody);
        return policyNumber;
    }

    // Helper method to extract policy number from the JSON response
    public String extractPolicyNumberFromResponse(String responseBody) {
        // Assuming the policy number comes in this format:
        // { "PolicyNumber" : "POL123456" }
        return responseBody.split("\"PolicyNumber\"\\s*:\\s*\"")[1].split("\"")[0];
    }
}
