Sub GenerateAllXPaths(node As Object, currentPath As String, ByRef xpaths As Collection)
    Dim newPath As String
    Dim childNode As Object
    Dim attrNode As MSXML2.IXMLDOMAttribute ' Renaming variable to avoid conflict
    Dim siblingIndex As Integer
    Dim siblingCount As Integer
    Dim siblingNode As Object
    
    If node.NodeType = 1 Then ' Check if it's an element node
        
        ' Determine the number of sibling nodes with the same name
        siblingCount = 0
        For Each siblingNode In node.ParentNode.ChildNodes
            If siblingNode.NodeType = 1 And siblingNode.nodeName = node.nodeName Then
                siblingCount = siblingCount + 1
            End If
        Next siblingNode
        
        ' Determine the index of the current node among its siblings with the same name
        siblingIndex = 1
        For Each siblingNode In node.ParentNode.ChildNodes
            If siblingNode Is node Then Exit For
            If siblingNode.NodeType = 1 And siblingNode.nodeName = node.nodeName Then
                siblingIndex = siblingIndex + 1
            End If
        Next siblingNode
        
        ' If there are multiple siblings with the same name, append the index to the XPath
        If siblingCount > 1 Then
            newPath = currentPath & "/" & node.nodeName & "[" & siblingIndex & "]"
        Else
            newPath = currentPath & "/" & node.nodeName
        End If
        
        ' Add the XPath for the current node to the collection along with its value
        If Len(node.nodeTypedValue) > 0 Then ' Use nodeTypedValue instead of node.Text
            xpaths.Add newPath & "||" & node.nodeTypedValue ' Store XPath and node value separated by "||"
        Else
            xpaths.Add newPath ' Just store the XPath if there's no node value
        End If
        
        ' Check for attributes and add their XPaths
        If node.Attributes.Length > 0 Then
            For Each attrNode In node.Attributes ' Renaming from attribute to attrNode
                xpaths.Add newPath & "[@" & attrNode.nodeName & "='" & attrNode.nodeValue & "']"
            Next attrNode
        End If
        
        ' Recursively process child nodes
        For Each childNode In node.ChildNodes
            GenerateAllXPaths childNode, newPath, xpaths
        Next childNode
    End If
End Sub






For Each xpathItem In xpaths
    If InStr(xpathItem, "||") > 0 Then ' Split the XPath and value
        Dim parts As Variant
        parts = Split(xpathItem, "||")
        
        wsNodeSheet.Cells(rowIndexNode, 1).Value = parts(0) ' XPath
        wsNodeSheet.Cells(rowIndexNode, 2).Value = "'" & parts(1) ' Node value (force text format)
        rowIndexNode = rowIndexNode + 1
    ElseIf InStr(xpathItem, "@") > 0 Then ' Attribute XPath
        Dim attrXPath As String, attrName As String, attrValue As String
        attrXPath = xpathItem
        attrName = Mid(attrXPath, InStr(attrXPath, "@") + 1, InStr(attrXPath, "=") - InStr(attrXPath, "@") - 1)
        attrValue = Mid(attrXPath, InStr(attrXPath, "=") + 2, Len(attrXPath) - InStr(attrXPath, "=") - 2)
        
        wsAttrSheet.Cells(rowIndexAttr, 1).Value = attrXPath
        wsAttrSheet.Cells(rowIndexAttr, 2).Value = attrName
        wsAttrSheet.Cells(rowIndexAttr, 3).Value = "'" & attrValue ' Force as text
        rowIndexAttr = rowIndexAttr + 1
    Else ' Just a node XPath without a value
        wsNodeSheet.Cells(rowIndexNode, 1).Value = xpathItem
        rowIndexNode = rowIndexNode + 1
    End If
Next xpathItem
