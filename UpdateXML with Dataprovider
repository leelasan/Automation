package updateXMLStructure;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class XMLUpdateTest {

    // Load Excel data and provide each row of PolicyData as a separate test
    @DataProvider(name = "policyDataProvider")
    public Object[][] policyDataProvider() {
        try {
            FileInputStream fis = new FileInputStream(new File("/mnt/data/data.xlsx"));
            Workbook workbook = new XSSFWorkbook(fis);

            Sheet policyDataSheet = workbook.getSheet("PolicyData");
            Sheet mappingSheet = workbook.getSheet("Mapping");

            // Get total rows (excluding header)
            int rowCount = policyDataSheet.getLastRowNum();
            Object[][] data = new Object[rowCount][2];

            for (int rowIndex = 1; rowIndex <= rowCount; rowIndex++) {
                Map<String, String> policyDataMap = new HashMap<>();
                Row policyDataRow = policyDataSheet.getRow(rowIndex);
                
                // Read each cell and add to policyDataMap
                for (Cell cell : policyDataRow) {
                    String columnName = policyDataSheet.getRow(0).getCell(cell.getColumnIndex()).getStringCellValue();
                    String value = cell.getStringCellValue();
                    policyDataMap.put(columnName, value);
                }

                // Assign PolicyData and Mapping sheets to each row of data
                data[rowIndex - 1][0] = policyDataMap;
                data[rowIndex - 1][1] = mappingSheet;
            }
            
            workbook.close();
            return data;
        } catch (Exception e) {
            e.printStackTrace();
            return new Object[0][0];
        }
    }

    @Test(dataProvider = "policyDataProvider")
    public void testXMLUpdate(Map<String, String> policyDataMap, Sheet mappingSheet) {
        try {
            // Load the XML template
            File inputFile = new File("/Users/leelasan/Downloads/Sample Acord 103 WL.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document docTemplate = dBuilder.parse(inputFile);
            docTemplate.getDocumentElement().normalize();

            // Create XPath instance
            XPath xPath = XPathFactory.newInstance().newXPath();

            // Create a copy of the XML document
            Document doc = (Document) docTemplate.cloneNode(true);
            doc.getDocumentElement().normalize();

            // Extract PolicyNumber for file naming
            String policyNumber = policyDataMap.get("PolicyNumber");

            // Iterate over Mapping sheet to apply updates
            Iterator<Row> rowIterator = mappingSheet.iterator();
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                if (row.getRowNum() == 0) {
                    continue; // Skip header row
                }

                String xpathExpression = row.getCell(1).getStringCellValue();
                String type = row.getCell(0).getStringCellValue();
                String policyDataColumn = row.getCell(2).getStringCellValue();
                String parameterizedValue = policyDataMap.get(policyDataColumn);

                // Based on "Type", perform either node or attribute update
                NodeList nodes = (NodeList) xPath.compile(xpathExpression).evaluate(doc, XPathConstants.NODESET);

                if (type.equalsIgnoreCase("Node")) {
                    if (nodes.getLength() > 0) {
                        nodes.item(0).setTextContent(parameterizedValue);
                    }
                } else if (type.equalsIgnoreCase("Attribute")) {
                    if (nodes.getLength() > 0) {
                        Element element = (Element) nodes.item(0);
                        element.setAttribute("tc", parameterizedValue);
                    }
                }
            }

            // Save the updated XML file
            String fileName = "/Users/leelasan/Downloads/xml_" + policyNumber + ".xml";
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(fileName));
            transformer.transform(source, result);

            System.out.println("XML file updated successfully: " + fileName);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
