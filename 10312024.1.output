<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="PolicyUpdateAndCreationSuite">
    <test name="PolicyUpdateAndCreationTest">
        <classes>
            <class name="test.XMLUpdateTest" />
        </classes>
    </test>
</suite>






package dataprovider;

import org.testng.annotations.DataProvider;
import org.apache.poi.ss.usermodel.*;
import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Map;

public class PolicyDataProvider {

    @DataProvider(name = "policyData")
    public Object[][] getPolicyData() throws Exception {
        // Load data from PolicyData_New and TC_Mapping sheets
        return loadData("RL_TestData.xlsx", "PolicyData_New", "TC_Mapping");
    }

    private Object[][] loadData(String filePath, String sheetName1, String sheetName2) throws Exception {
        Map<String, String> policyData = loadSheetData(filePath, sheetName1);
        Map<String, String> tcMappingData = loadSheetData(filePath, sheetName2);

        // Return as data array compatible with TestNG DataProvider
        return new Object[][]{{policyData, tcMappingData}};
    }

    private Map<String, String> loadSheetData(String filePath, String sheetName) throws Exception {
        Map<String, String> data = new HashMap<>();
        FileInputStream file = new FileInputStream(new File(filePath));
        Workbook workbook = WorkbookFactory.create(file);
        Sheet sheet = workbook.getSheet(sheetName);

        for (Row row : sheet) {
            Cell keyCell = row.getCell(0); // Assuming key is in column 0
            Cell valueCell = row.getCell(1); // Assuming value is in column 1
            if (keyCell != null && valueCell != null) {
                data.put(keyCell.getStringCellValue(), valueCell.getStringCellValue());
            }
        }
        workbook.close();
        return data;
    }
}









package test;

import dataprovider.PolicyDataProvider;
import org.testng.annotations.Test;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;
import okhttp3.*;

public class XMLPolicyTest {

    private final XPath xpath;

    public XMLPolicyTest() {
        this.xpath = XPathFactory.newInstance().newXPath();
    }

    @Test(dataProvider = "policyData", dataProviderClass = PolicyDataProvider.class)
    public void updateXMLAndCreatePolicyTest(Map<String, String> dataRow) throws Exception {
        String xmlFilePath = "Sample Acord 103 WL.xml";

        // Step 1: Update the XML
        updateXMLBasedOnPolicyData(xmlFilePath, dataRow);

        // Step 2: Create policy using API after XML update
        createPolicyUsingAPI(xmlFilePath, dataRow);
    }

    private void updateXMLBasedOnPolicyData(String xmlFilePath, Map<String, String> dataRow) throws Exception {
        Document xmlDoc = loadXMLDocument(xmlFilePath);

        for (Map.Entry<String, String> entry : dataRow.entrySet()) {
            String columnName = entry.getKey();
            String value = entry.getValue();

            if (columnName.contains("#")) {
                String[] parts = columnName.split("#");
                String nodeName = parts[0];
                String condition = parts[1];

                Node targetNode = findNodeByCondition(xmlDoc, nodeName, condition);
                if (targetNode != null) {
                    targetNode.setTextContent(value);
                }
            } else {
                Node node = findNode(xmlDoc, columnName);
                if (node != null) {
                    node.setTextContent(value);
                }
            }
        }

        updateAttributesFromMapping(xmlDoc, dataRow);
        saveXMLDocument(xmlDoc, xmlFilePath);
    }

    private Document loadXMLDocument(String filePath) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();
        return builder.parse(new File(filePath));
    }

    private void saveXMLDocument(Document doc, String filePath) throws Exception {
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(new File(filePath));
        transformer.transform(source, result);
    }

    private Node findNodeByCondition(Document xmlDoc, String nodeName, String condition) throws Exception {
        String xpathExpr = String.format("//*[local-name()='%s' and @id='%s']", nodeName, condition);
        return (Node) xpath.evaluate(xpathExpr, xmlDoc, XPathConstants.NODE);
    }

    private Node findNode(Document xmlDoc, String nodeName) throws Exception {
        String xpathExpr = String.format("//*[local-name()='%s']", nodeName);
        return (Node) xpath.evaluate(xpathExpr, xmlDoc, XPathConstants.NODE);
    }

    private void updateAttributesFromMapping(Document xmlDoc, Map<String, String> dataRow) throws Exception {
        Map<String, String> tcMapping = new PolicyDataProvider().getPolicyData(); // Mocked tcMapping
        // tcMapping logic here from PolicyDataProvider

        for (Map.Entry<String, String> entry : dataRow.entrySet()) {
            String fieldName = entry.getKey();
            String fieldValue = entry.getValue();

            if (tcMapping.containsKey(fieldName)) {
                String typeCode = tcMapping.get(fieldName);
                Node attributeNode = findNode(xmlDoc, fieldName);
                if (attributeNode != null) {
                    NamedNodeMap attributes = attributeNode.getAttributes();
                    if (attributes != null) {
                        Node tcAttribute = attributes.getNamedItem("tc");
                        if (tcAttribute != null) {
                            tcAttribute.setNodeValue(typeCode);
                        }
                    }
                }
            }
        }
    }

    private void createPolicyUsingAPI(String xmlFilePath, Map<String, String> dataRow) throws Exception {
        byte[] xmlBytes = Files.readAllBytes(Paths.get(xmlFilePath));
        String xmlContent = new String(xmlBytes);

        OkHttpClient client = new OkHttpClient();
        RequestBody requestBody = RequestBody.create(xmlContent, MediaType.parse("application/xml"));
        
        Request request = new Request.Builder()
                .url("https://example.com/api/createPolicy") // Replace with actual API URL
                .post(requestBody)
                .addHeader("Content-Type", "application/xml")
                .addHeader("Authorization", "Bearer YOUR_API_KEY") // Replace with actual API key if needed
                .build();

        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new RuntimeException("Policy creation failed: " + response.message());
            }
            System.out.println("Policy created successfully. Response: " + response.body().string());
        }
    }
}
