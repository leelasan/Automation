package XMLOperations.XPathExtractor;

import org.testng.annotations.Test;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class UpdateXMLWithDataProvider {

    @Test
    public void testXMLUpdate() {
        try {
            // Load the XML template
            File inputFile = new File("/Users/leelasan/Downloads/Sample Acord 103 WL.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document docTemplate = dBuilder.parse(inputFile);
            docTemplate.getDocumentElement().normalize();

            // Create XPath instance
            XPath xPath = XPathFactory.newInstance().newXPath();

            // Load the Excel file
            FileInputStream fis = new FileInputStream(new File("/Users/leelasan/Downloads/data.xlsx"));
            Workbook workbook = new XSSFWorkbook(fis);

            // Load PolicyData and Mapping sheets
            Sheet policyDataSheet = workbook.getSheet("PolicyData");
            Sheet mappingSheet = workbook.getSheet("Mapping");

            // Iterate over each row in the PolicyData sheet (starting from the second row)
            for (int rowIndex = 1; rowIndex <= policyDataSheet.getLastRowNum(); rowIndex++) {
                // Create a copy of the original XML document for each row
                Document doc = (Document) docTemplate.cloneNode(true);
                doc.getDocumentElement().normalize();

                // Read PolicyData for the current row into a map for quick access
                Map<String, String> policyDataMap = new HashMap<>();
                Row policyDataRow = policyDataSheet.getRow(rowIndex);
                for (Cell cell : policyDataRow) {
                    String columnName = policyDataSheet.getRow(0).getCell(cell.getColumnIndex()).getStringCellValue();
                    String value = policyDataRow.getCell(cell.getColumnIndex()).getStringCellValue();
                    policyDataMap.put(columnName, value);
                }

                // Extract PolicyNumber for file naming
                String policyNumber = policyDataMap.get("PolicyNumber");

                // Iterate over the Mapping sheet to apply updates
                Iterator<Row> rowIterator = mappingSheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    
                    if (row.getRowNum() == 0) {
                        // Skip header row
                        continue;
                    }

                    Cell xpathCell = row.getCell(1); // XPath Expression
                    Cell typeCell = row.getCell(0);  // Type (Node/Attribute)
                    Cell policyDataColumnCell = row.getCell(2); // PolicyDataColumn

                    String xpathExpression = xpathCell.getStringCellValue();
                    String type = typeCell.getStringCellValue();
                    String policyDataColumn = policyDataColumnCell.getStringCellValue();
                    String parameterizedValue = policyDataMap.get(policyDataColumn);

                    // Based on "Type", perform either node or attribute update
                    NodeList nodes = (NodeList) xPath.compile(xpathExpression).evaluate(doc, XPathConstants.NODESET);

                    if (type.equalsIgnoreCase("Node")) {
                        // Update node content
                        if (nodes.getLength() > 0) {
                            nodes.item(0).setTextContent(parameterizedValue);
                        }
                    } else if (type.equalsIgnoreCase("Attribute")) {
                        // Update attribute value
                        if (nodes.getLength() > 0) {
                            Element element = (Element) nodes.item(0);
                            element.setAttribute("tc", parameterizedValue);
                        }
                    }
                }

                // Save each XML with the PolicyNumber as the file name
                String fileName = "/Users/leelasan/Downloads/xml_" + policyNumber + ".xml";

                // Save the modified XML document to the local drive
                TransformerFactory transformerFactory = TransformerFactory.newInstance();
                Transformer transformer = transformerFactory.newTransformer();
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                DOMSource source = new DOMSource(doc);
                StreamResult result = new StreamResult(new File(fileName));
                transformer.transform(source, result);

                System.out.println("XML file updated successfully: " + fileName);
            }

            // Close the workbook
            workbook.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
