import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.testng.annotations.DataProvider;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class DataProviderClass {

    @DataProvider(name = "xmlUpdateData")
    public static Iterator<Object[]> getData() throws IOException {
        List<Object[]> data = new ArrayList<>();
        FileInputStream file = new FileInputStream("path_to_data_sheet.xlsx");
        Workbook workbook = new XSSFWorkbook(file);
        Sheet sheet = workbook.getSheet("PolicyData");

        for (Row row : sheet) {
            String testCaseName = row.getCell(0).getStringCellValue();
            String execution = row.getCell(1).getStringCellValue();
            String templateName = row.getCell(2).getStringCellValue();

            if ("Yes".equalsIgnoreCase(execution)) {
                List<Object[]> updates = new ArrayList<>();
                int i = 3; // Start from the fourth cell where nodes data begins
                
                while (i < row.getLastCellNum()) {
                    String nodeName = row.getCell(i).getStringCellValue();
                    String attributeName = row.getCell(i + 1) != null ? row.getCell(i + 1).getStringCellValue() : "";
                    String newValue = row.getCell(i + 2).getStringCellValue();
                    String condition = row.getCell(i + 3) != null ? row.getCell(i + 3).getStringCellValue() : "";

                    updates.add(new Object[]{nodeName, attributeName, newValue, condition});
                    i += 4; // Move to the next set of NodeX_Name, NodeX_Attr, NodeX_Value, NodeX_Condition
                }
                
                data.add(new Object[]{testCaseName, templateName, updates});
            }
        }
        
        workbook.close();
        file.close();

        return data.iterator();
    }
}














import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;
import org.apache.commons.codec.binary.Base64;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.core5.http.ContentType;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.AfterClass;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.FileInputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.stream.IntStream;

public class XMLUpdateTest {

    private Document doc;
    private String templateDir;
    private String token;
    private ExtentReports extent;
    private ExtentTest extentTest;

    @Parameters("templateDir")
    @BeforeClass
    public void setup(String templateDir) throws Exception {
        this.templateDir = templateDir;

        // Initialize ExtentReports
        ExtentHtmlReporter htmlReporter = new ExtentHtmlReporter("ExtentReport.html");
        htmlReporter.config().setTheme(Theme.STANDARD);
        htmlReporter.config().setDocumentTitle("Policy Creation Test Report");
        htmlReporter.config().setReportName("Policy Creation Automation Test");

        extent = new ExtentReports();
        extent.attachReporter(htmlReporter);
        
        extentTest = extent.createTest("Token Generation Test");
        extentTest.log(Status.INFO, "Generating bearer token");
        
        try {
            this.token = getBearerToken();
            extentTest.log(Status.PASS, "Bearer token generated successfully");
        } catch (Exception e) {
            extentTest.log(Status.FAIL, "Bearer token generation failed: " + e.getMessage());
            throw e;
        }
    }

    @BeforeMethod
    @Parameters({"templateName"})
    public void loadTemplate(String templateName) throws Exception {
        extentTest = extent.createTest("Load Template");
        extentTest.log(Status.INFO, "Loading XML template: " + templateName);
        
        try {
            File templateFile = new File(templateDir, templateName);
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            doc = builder.parse(templateFile);
            extentTest.log(Status.PASS, "Template loaded successfully");
        } catch (Exception e) {
            extentTest.log(Status.FAIL, "Failed to load template: " + e.getMessage());
            throw e;
        }
    }

    @Test(dataProvider = "xmlUpdateData", dataProviderClass = DataProviderClass.class)
    public void updateXML(String testCaseName, String templateName, List<Object[]> updates) throws Exception {
        String polNumber = (String) updates.get(0)[2];
        extentTest = extent.createTest("Policy Creation Test for " + polNumber);

        for (Object[] update : updates) {
            String nodeName = (String) update[0];
            String attributeName = (String) update[1];
            String newValue = (String) update[2];
            String condition = update.length > 3 ? (String) update[3] : "";

            NodeList nodeList = doc.getElementsByTagName(nodeName);

            IntStream.range(0, nodeList.getLength())
                    .mapToObj(nodeList::item)
                    .filter(node -> node instanceof Element)
                    .map(node -> (Element) node)
                    .forEach(element -> {
                        boolean matchesCondition = true;

                        if (!condition.isEmpty()) {
                            String[] conditionParts = condition.split("=");
                            String conditionAttribute = conditionParts[0].trim();
                            String conditionValue = conditionParts[1].trim();

                            Node parentNode = element.getParentNode();
                            while (parentNode != null && parentNode.getNodeType() == Node.ELEMENT_NODE) {
                                Element parentElement = (Element) parentNode;
                                if (parentElement.hasAttribute(conditionAttribute) &&
                                    parentElement.getAttribute(conditionAttribute).equals(conditionValue)) {
                                    matchesCondition = true;
                                    break;
                                }
                                parentNode = parentNode.getParentNode();
                            }
                        }

                        if (matchesCondition) {
                            if (attributeName.isEmpty()) {
                                element.setTextContent(newValue);
                            } else {
                                element.setAttribute(attributeName, newValue);
                            }
                            extentTest.log(Status.INFO, "Updated " + nodeName + " with value: " + newValue);
                        }
                    });
        }

        File outputDir = new File("output");
        if (!outputDir.exists()) outputDir.mkdir();

        File savedFile = new File(outputDir, polNumber + "_updated.xml");
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(savedFile);
        transformer.transform(source, result);
        extentTest.log(Status.INFO, "Updated XML saved as: " + savedFile.getPath());

        String encodedXML = encodeXMLToBase64(savedFile.getPath());
        extentTest.log(Status.INFO, "Encoded XML to Base64 for policy creation");

        try {
            String policyNumber = createPolicy(token, encodedXML);
            extentTest.log(Status.PASS, "Policy created successfully with Policy Number: " + policyNumber);
        } catch (Exception e) {
            extentTest.log(Status.FAIL, "Policy creation failed: " + e.getMessage());
            throw e;
        }
    }

    public String encodeXMLToBase64(String filePath) throws Exception {
        File file = new File(filePath);
        FileInputStream fis = new FileInputStream(file);
        byte[] bytes = new byte[(int) file.length()];
        fis.read(bytes);
        fis.close();
        return Base64.encodeBase64String(bytes);
    }

    public String getBearerToken() throws Exception {
        String tokenApiUrl = "https://your-api-url/token";
        String payload = "{ \"username\" : \"LVAKATI\", \"password\" : \"S123456\" }";

        CloseableHttpClient client = HttpClients.createDefault();
        HttpPost post = new HttpPost(tokenApiUrl);

        post.setHeader("Content-Type", "application/json");
        post.setHeader("X-API-KEY", "c38879f");
        post.setEntity(new StringEntity(payload, ContentType.APPLICATION_JSON));

        CloseableHttpResponse response = client.execute(post);
        String responseBody = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);
        client.close();

        return extractTokenFromResponse(responseBody);
    }

    public String extractTokenFromResponse(String responseBody) {
        return responseBody.split("\"token\"\\s*:\\s*\"")[1].split("\"")[0];
    }

    public String createPolicy(String token, String encodedXML) throws Exception {
        String policyApiUrl = "https://your-api-url/policy";
        String payload = "{ \"encodedACORDXml\" : \"" + encodedXML + "\" }";

        CloseableHttpClient client = HttpClients.createDefault();
        HttpPost post = new HttpPost(policyApiUrl);

        post.setHeader("Content-Type", "application/json");
        post.setHeader("Authorization", "Bearer " + token);
        post.setHeader("X-API-KEY", "c38879f");
        post.setEntity(new StringEntity(payload, ContentType.APPLICATION_JSON));

        CloseableHttpResponse response = client.execute(post);
        String responseBody = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);
        client.close();

        return extractPolicyNumberFromResponse(responseBody);
    }

    public String extractPolicyNumberFromResponse(String responseBody) {
        JSONObject jsonResponse = new JSONObject(responseBody);
        return jsonResponse.getJSONObject("PolicyHdr").getJSONObject("PolicyHdrData").getString("PolicyNumber");
    }

    @AfterClass
    public void tearDown() {
        extent.flush();
    }
}







**************************






if (newValue.isEmpty()) {
    element.setTextContent("");  // Set node to "null" by making its content empty
    extentTest.log(Status.INFO, "Cleared value of " + nodeName + " as per test data sheet instruction");
} else {
    element.setTextContent(newValue);
    extentTest.log(Status.INFO, "Updated " + nodeName + " with value: " + newValue);
}




**********************************



@Test(dataProvider = "xmlUpdateData", dataProviderClass = DataProviderClass.class)
public void updateXML(String testCaseName, String templateName, List<Object[]> updates) throws Exception {
    // Extract PolNumber from Node1_Value (first update entry's newValue)
    String polNumber = (String) updates.get(0)[2];
    extentTest = extent.createTest("Policy Creation Test for " + polNumber);

    // Update XML nodes based on test data
    for (Object[] update : updates) {
        String nodeName = (String) update[0];
        String attributeName = (String) update[1];
        String newValue = (String) update[2];
        String condition = update.length > 3 ? (String) update[3] : "";

        NodeList nodeList = doc.getElementsByTagName(nodeName);

        IntStream.range(0, nodeList.getLength())
                .mapToObj(nodeList::item)
                .filter(node -> node instanceof Element)
                .map(node -> (Element) node)
                .forEach(element -> {
                    boolean matchesCondition = true;

                    // Check condition if specified (e.g., "Party id=Party_Beneficiary_1")
                    if (!condition.isEmpty()) {
                        String[] conditionParts = condition.split("=");
                        String conditionAttribute = conditionParts[0].trim();
                        String conditionValue = conditionParts[1].trim();

                        Node parentNode = element.getParentNode();
                        while (parentNode != null && parentNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element parentElement = (Element) parentNode;
                            if (parentElement.hasAttribute(conditionAttribute) &&
                                parentElement.getAttribute(conditionAttribute).equals(conditionValue)) {
                                matchesCondition = true;
                                break;
                            }
                            parentNode = parentNode.getParentNode();
                        }
                    }

                    if (matchesCondition) {
                        if (attributeName.isEmpty()) {
                            // If newValue is blank, clear the node content
                            if (newValue.isEmpty()) {
                                element.setTextContent("");  // Set node to "null" by making its content empty
                                extentTest.log(Status.INFO, "Cleared value of " + nodeName + " as per test data sheet instruction");
                            } else {
                                element.setTextContent(newValue);
                                extentTest.log(Status.INFO, "Updated " + nodeName + " with value: " + newValue);
                            }
                        } else {
                            element.setAttribute(attributeName, newValue);
                            extentTest.log(Status.INFO, "Updated attribute " + attributeName + " of " + nodeName + " with value: " + newValue);
                        }
                    }
                });
    }

    File outputDir = new File("output");
    if (!outputDir.exists()) outputDir.mkdir();

    File savedFile = new File(outputDir, polNumber + "_updated.xml");
    Transformer transformer = TransformerFactory.newInstance().newTransformer();
    DOMSource source = new DOMSource(doc);
    StreamResult result = new StreamResult(savedFile);
    transformer.transform(source, result);
    extentTest.log(Status.INFO, "Updated XML saved as: " + savedFile.getPath());

    // Convert XML to Base64 and create policy via API
    String encodedXML = encodeXMLToBase64(savedFile.getPath());
    extentTest.log(Status.INFO, "Encoded XML to Base64 for policy creation");

    try {
        String policyNumber = createPolicy(token, encodedXML);
        extentTest.log(Status.PASS, "Policy created successfully with Policy Number: " + policyNumber);
    } catch (Exception e) {
        extentTest.log(Status.FAIL, "Policy creation failed: " + e.getMessage());
        throw e;
    }
}

