import org.w3c.dom.*;
import javax.xml.parsers.*;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class XMLParserUtil {

    public static Map<String, String> parseXML(String filePath) {
        Map<String, String> keyValueMap = new HashMap<>();

        try {
            // Load the XML file
            File file = new File(filePath);
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true); // Handle namespaces
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(file);
            document.getDocumentElement().normalize();

            // Extract key-value pairs from XML
            extractElements(document.getDocumentElement(), keyValueMap, "");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return keyValueMap;
    }

    private static void extractElements(Node node, Map<String, String> keyValueMap, String parentKey) {
        if (node.getNodeType() == Node.ELEMENT_NODE) {
            Element element = (Element) node;
            String key = parentKey.isEmpty() ? element.getTagName() : parentKey + "." + element.getTagName();

            if (element.hasChildNodes()) {
                NodeList children = element.getChildNodes();
                boolean hasText = false;

                for (int i = 0; i < children.getLength(); i++) {
                    Node child = children.item(i);
                    if (child.getNodeType() == Node.TEXT_NODE && child.getNodeValue().trim().length() > 0) {
                        hasText = true;
                        keyValueMap.put(key, child.getNodeValue().trim());
                    } else if (child.getNodeType() == Node.ELEMENT_NODE) {
                        extractElements(child, keyValueMap, key);
                    }
                }

                // Store attributes separately
                if (!hasText && element.hasAttributes()) {
                    NamedNodeMap attributes = element.getAttributes();
                    for (int j = 0; j < attributes.getLength(); j++) {
                        Node attr = attributes.item(j);
                        keyValueMap.put(key + "@" + attr.getNodeName(), attr.getNodeValue());
                    }
                }
            }
        }
    }
}




import java.util.Map;

public class MainClass {
    public static void main(String[] args) {
        String xmlFilePath = "C:\\path\\to\\your\\01001008.xml"; // Update with your file path
        Map<String, String> xmlData = XMLParserUtil.parseXML(xmlFilePath);

        // Example: Fetching specific values
        System.out.println("Policy Number: " + xmlData.get("PolNumber"));
        System.out.println("Carrier Code: " + xmlData.get("CarrierCode"));
        System.out.println("Effective Date: " + xmlData.get("EffDate"));

        // Print all key-value pairs
        System.out.println("\n--- Complete XML Data ---");
        xmlData.forEach((key, value) -> System.out.println(key + " = " + value));
    }
}
