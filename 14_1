@Test(dataProvider = "xmlUpdateData", dataProviderClass = fast.dataProviders.ReadDataFromXLSX.class)
public void updateXML(String testCaseName, String templateName, List<Object[]> updates, ITestContext context) throws Exception {
	
	if (testCaseRetryCount.get(testCaseName) == null)
		testCaseRetryCount.put(testCaseName, Integer.valueOf("1"));
	else {
		int count = testCaseRetryCount.get(testCaseName);
		testCaseRetryCount.put(testCaseName, ++count);
	}
	
	try {
		ExtentReports report = new ExtentReports("dummy.html");
		test = report.startTest("Policy Creation Test for " + testCaseName);

		String polNumber = (String) updates.get(0)[2];
		subTest = report.startTest("Policy Creation Test for " + testCaseName + " with the policy number " + polNumber);

		// Load the XML template
		templateDir = context.getCurrentXmlTest().getParameter("templateDir");
		loadTemplate(templateName, subTest);

		for (Object[] update : updates) {
			String nodeName = (String) update[0];
			String attributeValue = (String) update[1];
			String nodeValue = (String) update[2];
			String condition = (String) update[3];

			NodeList nodeList = doc.getElementsByTagName(nodeName);

			IntStream.range(0, nodeList.getLength()).mapToObj(nodeList::item)
					.filter(node -> node instanceof Element).map(node -> (Element) node)
					.filter(element -> matchesCondition(element, condition)).forEach(element -> {
						if (attributeValue != null && !attributeValue.isEmpty()) {
							element.setAttribute("tc", attributeValue);
							subTest.log(LogStatus.PASS, "Updated attribute TypeCode of [<font color='#30A0DB'><b>" + nodeName + "</b></font>] with value: [<font color='#30A0DB'><b>" + attributeValue + "</b></font>]");
						}
						if (nodeValue.isEmpty()) {
							element.setTextContent("");
							subTest.log(LogStatus.PASS, "Cleared value of [<font color='#30A0DB'><b>" + nodeName + "</b></font>]");
						} else {
							element.setTextContent(nodeValue);
							subTest.log(LogStatus.PASS, "Updated [<font color='#30A0DB'><b>" + nodeName + "</b></font>] with value: [<font color='#30A0DB'><b>" + nodeValue + "</b></font>]");
						}
					});
		}

		// Save the XML with minimal transformation
		saveXML(polNumber + "_updated.xml", subTest);

		subTest.log(LogStatus.INFO, "Updated XML saved with preserved schema structure");
		String encodedXML = encodeXMLToBase64(new File("output", polNumber + "_updated.xml").getPath());
		subTest.log(LogStatus.PASS, "Encoded XML to Base64");
		
		subTest.log(LogStatus.INFO, "Create Policy using API endpoint URL");
		try {
			String policyNumber = createPolicy(token, encodedXML, subTest);
			subTest.log(LogStatus.PASS, "Policy created successfully with Policy Number: " + policyNumber);
		} catch (Exception e) {
			subTest.log(LogStatus.FAIL, "Policy creation failed: " + e.getMessage());
			throw e;
		}

		test.appendChild(subTest);
		addTestToMainReport(test);
		
	} catch (Exception e) {
		e.printStackTrace();
		subTest.log(LogStatus.FAIL, "Exception Occurred - " + e.getLocalizedMessage());
		test.appendChild(subTest);
		addTestToMainReport(test);
		Assert.fail();
	}
}

private void saveXML(String fileName, ExtentTest subTest) throws TransformerException {
	File outputDir = new File("output");
	if (!outputDir.exists()) outputDir.mkdir();

	File savedFile = new File(outputDir, fileName);

	// Configure transformer to avoid schema changes
	TransformerFactory transformerFactory = TransformerFactory.newInstance();
	Transformer transformer = transformerFactory.newTransformer();
	transformer.setOutputProperty(OutputKeys.INDENT, "no"); // Disable indentation to prevent structural changes
	transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no"); // Preserve XML declaration
	transformer.setOutputProperty(OutputKeys.STANDALONE, "no"); // Ensure standalone attribute matches original if present

	DOMSource source = new DOMSource(doc);
	StreamResult result = new StreamResult(savedFile);
	transformer.transform(source, result);

	subTest.log(LogStatus.INFO, "Saved XML file with minimal transformation to maintain schema");
}
