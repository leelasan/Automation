package test.fast.CreatePolicyforLife;

import com.nyl.base.WebBase;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.FileUtils;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.core5.http.ContentType;
import org.json.JSONObject;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.ITestContext;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.AfterClass;
import org.testng.annotations.Test;
import org.testng.annotations.DataProvider;
import org.w3c.dom.*;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.stream.IntStream;
import com.nyl.utilities.EnvParameters;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import com.relevantcodes.extentreports.model.ITest;
import com.relevantcodes.extentreports.model.Log;

public class XMLUpdateTest extends WebBase {

	private Document doc;
	public static ExtentReports mainReport;
	public HashMap<String, Integer> testCaseRetryCount = new HashMap<String, Integer>();
	public String folderPath;
	
	public String templateDir;
	private String token;
	
	public ExtentTest subTest = null;
	public ExtentTest test = null;
	public ExtentTest tokenSubTest = null;

	
	@BeforeClass
	public void setup() throws Exception {
		
		// Initialize ExtentReports 
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HHmmss"); 
		LocalDateTime now = LocalDateTime.now(); 
		folderPath =".//Reports/Functional Test Reports/CreatePolicyWithAPI/Test Report_" + dtf.format(now); 
		fileName = folderPath + "/CreatePolicyWithAPI.html";
		mainReport = new ExtentReports(fileName); 
		mainReport.loadConfig(new File(".//Config Files/Functional Test Report-config.xml"));
		
		ExtentReports report = new ExtentReports("dummy.html");
		test = report.startTest("Generate Token"); 
		tokenSubTest = report.startTest("Token Generation Steps"); 
		tokenSubTest.log(LogStatus.INFO,"Generating bearer token");
		
		try {
			this.token = getBearerToken(tokenSubTest);
			tokenSubTest.log(LogStatus.PASS, "Bearer token generated successfully");
			tokenSubTest.log(LogStatus.INFO,"<font color='#30A0DB'><b>token: </b></font>"+this.token);

		} catch (Exception e) {
			 tokenSubTest.log(LogStatus.FAIL, "Bearer token generation failed: "+ e.getMessage());
			throw e;
		}

		test.appendChild(tokenSubTest);
		addTestToMainReport(test);

	}

	@Test(dataProvider = "xmlUpdateData", dataProviderClass = fast.dataProviders.ReadDataFromXLSX.class)
	public void updateXML(String testCaseName, String templateName, List<Object[]> updates, ITestContext context) throws Exception {
		
		if (testCaseRetryCount.get(testCaseName) == null)
			testCaseRetryCount.put(testCaseName, Integer.valueOf("1"));
		else {
			int count = testCaseRetryCount.get(testCaseName);
			testCaseRetryCount.put(testCaseName, ++count);
		}
		
		try {
			ExtentReports report = new ExtentReports("dummy.html");
			test = report.startTest("Policy Creation Test for " + testCaseName);

			String polNumber = (String) updates.get(0)[2];
			subTest = report.startTest("Policy Creation Test for " + testCaseName + " with the policy number " + polNumber);

			// Load the XML template
			templateDir = context.getCurrentXmlTest().getParameter("templateDir");
			loadTemplate(templateName, subTest);

			for (Object[] update : updates) {
				String nodeName = (String) update[0];
				String attributeValue = (String) update[1];
				String nodeValue = (String) update[2];
				String condition = (String) update[3];

				NodeList nodeList = doc.getElementsByTagName(nodeName);

				IntStream.range(0, nodeList.getLength()).mapToObj(nodeList::item)
						.filter(node -> node instanceof Element).map(node -> (Element) node)
						.filter(element -> matchesCondition(element, condition)).forEach(element -> {
							if (attributeValue != null && !attributeValue.isEmpty()) {
								element.setAttribute("tc", attributeValue);
								subTest.log(LogStatus.PASS, "Updated attribute TypeCode of [<font color='#30A0DB'><b>" + nodeName + "</b></font>] with value: [<font color='#30A0DB'><b>" + attributeValue + "</b></font>]");
							}
							if (nodeValue.isEmpty()) {
								element.setTextContent("");
								subTest.log(LogStatus.PASS, "Cleared value of [<font color='#30A0DB'><b>" + nodeName + "</b></font>]");
							} else {
								element.setTextContent(nodeValue);
								subTest.log(LogStatus.PASS, "Updated [<font color='#30A0DB'><b>" + nodeName + "</b></font>] with value: [<font color='#30A0DB'><b>" + nodeValue + "</b></font>]");
							}
						});
			}

			// Save the XML with minimal transformation
			saveXML(polNumber + "_updated.xml", subTest);

			subTest.log(LogStatus.INFO, "Updated XML saved with preserved schema structure");
			String encodedXML = encodeXMLToBase64(new File("output", polNumber + "_updated.xml").getPath());
			subTest.log(LogStatus.PASS, "Encoded XML to Base64");
			
			subTest.log(LogStatus.INFO, "Create Policy using API endpoint URL");
			try {
				String policyNumber = createPolicy(token, encodedXML, subTest);
				subTest.log(LogStatus.PASS, "Policy created successfully with Policy Number: " + policyNumber);
			} catch (Exception e) {
				subTest.log(LogStatus.FAIL, "Policy creation failed: " + e.getMessage());
				throw e;
			}

			test.appendChild(subTest);
			addTestToMainReport(test);
			
		} catch (Exception e) {
			e.printStackTrace();
			subTest.log(LogStatus.FAIL, "Exception Occurred - " + e.getLocalizedMessage());
			test.appendChild(subTest);
			addTestToMainReport(test);
			Assert.fail();
		}
	}

	private void saveXML(String fileName, ExtentTest subTest) throws TransformerException {
	    File outputDir = new File("output");
	    if (!outputDir.exists()) outputDir.mkdir();

	    File savedFile = new File(outputDir, fileName);

	    // Configure transformer to avoid any schema or formatting changes
	    TransformerFactory transformerFactory = TransformerFactory.newInstance();
	    Transformer transformer = transformerFactory.newTransformer();

	    // Keep settings to minimize structural modifications
	    transformer.setOutputProperty(OutputKeys.INDENT, "no"); // Disable indentation
	    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes"); // Keep XML declaration

	    
	    // Perform the transformation to the saved XML file
	    DOMSource source = new DOMSource(doc);
	    StreamResult result = new StreamResult(savedFile);
	    transformer.transform(source, result);

	    subTest.log(LogStatus.INFO, "Saved XML file with minimal transformation to maintain schema integrity.");
	}

	private boolean matchesCondition(Element element, String condition) {
		if (condition.isEmpty()) {
			return true;
		}

		/*
		 * String[] conditionParts = condition.split("="); if (conditionParts.length !=
		 * 2) { return false; }
		 */

		String conditionAttribute = "id";// conditionParts[0].trim();
		String conditionValue = condition; // conditionParts[1].trim();

		Node currentNode = element;
		while (currentNode != null && currentNode.getNodeType() == Node.ELEMENT_NODE) {
			Element currentElement = (Element) currentNode;
			if (currentElement.hasAttribute(conditionAttribute)
					&& currentElement.getAttribute(conditionAttribute).equals(conditionValue)) {
				return true;
			}
			currentNode = currentNode.getParentNode();
		}
		return false;
	}

	private void loadTemplate(String templateName, ExtentTest subTest) throws Exception {
		subTest.log(LogStatus.INFO, "Loading XML template: [<font color='#30A0DB'><b>" + templateName +"</b></font>]");
		File templateFile = new File(templateDir, templateName);
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setNamespaceAware(true);
		DocumentBuilder builder = factory.newDocumentBuilder();
		doc = builder.parse(templateFile);
		subTest.log(LogStatus.PASS, "Template loaded successfully");
	}

	private String encodeXMLToBase64(String filePath) throws Exception {
		File file = new File(filePath);
		FileInputStream fis = new FileInputStream(file);
		byte[] bytes = new byte[(int) file.length()];
		fis.read(bytes);
		fis.close();
		return Base64.encodeBase64String(bytes);
	}

	private String getBearerToken(ExtentTest tokenSubTest) throws Exception {
		FileInputStream fis = null;
		Properties prop = null;

		fis = new FileInputStream("config.properties");
		prop = new Properties();
		prop.load(fis);
		String userID = prop.getProperty("User_Name");
		String password = prop.getProperty("Password");
		
		// Prepare the payload
		String payload = "{ \"username\" : \"" + userID + "\", \"password\" : \"" + password + "\" }";
		tokenSubTest.log(LogStatus.INFO,"Created the payload with User ID: [<font color='#30A0DB'><b>"+userID+"</b></font>] and Password: [<font color='#30A0DB'><b>"+password+"</b></font>]");
		
		// Create the HTTP POST request
		CloseableHttpClient client = HttpClients.createDefault();
		HttpPost post = new HttpPost(EnvParameters.tokenApiUrl);
		
		// Set headers
		post.setHeader("Content-Type", "application/json");
		post.setHeader("X-API-KEY", EnvParameters.XAPIKEY);

		// Set payload
		post.setEntity(new StringEntity(payload, ContentType.APPLICATION_JSON));

		tokenSubTest.log(LogStatus.INFO,"Hitting the token API endpoint URL");
		tokenSubTest.log(LogStatus.PASS, "with the token api URL: [<font color='#30A0DB'><b>"+EnvParameters.tokenApiUrl+"</b></font>]");
		tokenSubTest.log(LogStatus.PASS, "and with the API Key: [<font color='#30A0DB'><b>"+EnvParameters.XAPIKEY+"</b></font>]");
		
		// Execute the request
		CloseableHttpResponse response = client.execute(post);

		// Extract response body
		String responseBody = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);
		client.close();

		// Extract and return the token from the response
		return extractTokenFromResponse(responseBody);

	}

	public String extractTokenFromResponse(String responseBody) {
		return responseBody.split("\"token\"\\s*:\\s*\"")[1].split("\"")[0];
	}

	private String createPolicy(String token, String encodedXML, ExtentTest subTest) throws Exception {
		// Prepare the payload
		String payload = "{ \"encodedACORDXml\" : \"" + encodedXML + "\" }";
		subTest.log(LogStatus.PASS, "Created payload using Encoded XML");
		
		// Create the HTTP POST request
		CloseableHttpClient client = HttpClients.createDefault();
		HttpPost post = new HttpPost(EnvParameters.policyApiUrl);

		// Set headers
		post.setHeader("Content-Type", "application/json");
		post.setHeader("Authorization", "Bearer " + token);
		post.setHeader("X-API-KEY", EnvParameters.XAPIKEY);

		// Set payload
		post.setEntity(new StringEntity(payload, ContentType.APPLICATION_JSON));
		
		subTest.log(LogStatus.INFO, "Hitting the Policy Creation endpoint URL");
		subTest.log(LogStatus.PASS, "with the policy api URL: [<font color='#30A0DB'><b>"+EnvParameters.policyApiUrl+"</b></font>]");
		subTest.log(LogStatus.PASS, "and with the API Key: [<font color='#30A0DB'><b>"+EnvParameters.XAPIKEY+"</b></font>]");
		
		// Execute the request
		CloseableHttpResponse response = client.execute(post);

		// Extract response body
		String responseBody = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);
		client.close();

		subTest.log(LogStatus.PASS, "<font color='#30A0DB'><b>Response Body:</b></font> "+responseBody);
		// Extract and return the Policy Number from the response
		return extractPolicyNumberFromResponse(responseBody);
	}

	public String extractPolicyNumberFromResponse(String responseBody) {
		JSONObject jsonResponse = new JSONObject(responseBody);
		return jsonResponse.getJSONObject("PolicyHdr").getJSONObject("PolicyHdrData").getString("PolicyNumber");
	}

	public void logError(ExtentTest localTest, Exception e, WebDriver driver) {
		String screenshotFileName = "/Screenshots/Screenshot_" + Math.random() + ".png";
		String screenshotPath = System.getProperty("user.dir") + folderPath.substring(2) + screenshotFileName;
		screenshotFileName = "./" + screenshotFileName;
		File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		try {
			FileUtils.copyFile(scrFile, new File(screenshotPath));
		} catch (IOException e1) {

			e1.printStackTrace();
		}
		localTest.log(LogStatus.ERROR, "Exception Occured and Execution Stopped.\n" + e.getLocalizedMessage()
				+ localTest.addScreenCapture(screenshotFileName));
	}

	@AfterClass(alwaysRun = true)
	public void reporee(ITestContext result) {
		try {
			FileUtils.deleteDirectory(new File(folderPath + "/Additional Supporting Reports"));
		} catch (IOException e) {
			e.printStackTrace();
		}

		mainReport.flush();
	}

	public void addTestToMainReport(ExtentTest test) {
		ITest grandParentTest = test.getTest();
		ExtentTest parentTest = mainReport.startTest(grandParentTest.getName());
		List<com.relevantcodes.extentreports.model.Test> children = grandParentTest.getNodeList();
		for (int k = 0; k < children.size(); k++) {
			ExtentTest child = mainReport.startTest(children.get(k).getName());
			List<Log> logs = children.get(k).getLogList();

			for (int i = 0; i < logs.size(); i++) {
				child.log(logs.get(i).getLogStatus(), logs.get(i).getDetails());

			}
			parentTest.appendChild(child);
			mainReport.endTest(child);
		}

		mainReport.endTest(parentTest);
	}
}
