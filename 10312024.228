import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.testng.annotations.DataProvider;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

public class DataProviderClass {

    @DataProvider(name = "xmlUpdateData")
    public static Iterator<Object[]> getData() throws IOException {
        List<Object[]> data = new ArrayList<>();
        FileInputStream file = new FileInputStream("RL_TestData.xlsx");
        Workbook workbook = new XSSFWorkbook(file);

        // Load PolicyData_New sheet
        Sheet policyDataSheet = workbook.getSheet("PolicyData_New");
        Row headerRow = policyDataSheet.getRow(0);

        // Load TC_Mapping sheet into a lookup map
        Map<String, String> tcMapping = loadTCMapping(workbook.getSheet("TC_Mapping"));

        for (int rowIndex = 1; rowIndex <= policyDataSheet.getLastRowNum(); rowIndex++) {
            Row row = policyDataSheet.getRow(rowIndex);
            if (row == null) continue;

            String testCaseName = row.getCell(0).getStringCellValue();  // Assume test case name is in the first column
            String execution = row.getCell(1).getStringCellValue();     // Execution indicator in the second column

            if ("Yes".equalsIgnoreCase(execution)) {
                List<Object[]> updates = new ArrayList<>();
                
                for (int colIndex = 2; colIndex < headerRow.getLastCellNum(); colIndex++) {
                    Cell headerCell = headerRow.getCell(colIndex);
                    Cell dataCell = row.getCell(colIndex);
                    
                    if (headerCell != null && dataCell != null) {
                        String headerName = headerCell.getStringCellValue();
                        String nodeValue = dataCell.getStringCellValue();

                        // Split header name by '#' to get Node_Name and Condition if present
                        String[] parts = headerName.split("#");
                        String nodeName = parts[0];
                        String condition = parts.length > 1 ? parts[1] : "";

                        // Lookup in TC_Mapping if nodeValue is a Field_Value and get the TypeCode for the attribute
                        String attributeValue = tcMapping.getOrDefault(nodeName + "#" + nodeValue, null);

                        updates.add(new Object[]{nodeName, attributeValue, nodeValue, condition});
                    }
                }
                
                data.add(new Object[]{testCaseName, "Sample Acord 103 WL.xml", updates});
            }
        }

        workbook.close();
        file.close();

        return data.iterator();
    }

    private static Map<String, String> loadTCMapping(Sheet mappingSheet) {
        Map<String, String> mapping = new HashMap<>();
        
        for (int rowIndex = 1; rowIndex <= mappingSheet.getLastRowNum(); rowIndex++) {
            Row row = mappingSheet.getRow(rowIndex);
            if (row == null) continue;

            String fieldName = row.getCell(0).getStringCellValue();
            String fieldValue = row.getCell(1).getStringCellValue();
            String typeCode = row.getCell(2).getStringCellValue();

            // Combine Field_Name and Field_Value as the key, mapping to TypeCode
            mapping.put(fieldName + "#" + fieldValue, typeCode);
        }

        return mapping;
    }
}










@Test(dataProvider = "xmlUpdateData", dataProviderClass = DataProviderClass.class)
public void updateXML(String testCaseName, String templateName, List<Object[]> updates) throws Exception {
    // Load the XML template file
    loadTemplate(templateName);

    // Extract PolNumber (assumed to be the value of the first update entry's newValue)
    String polNumber = (String) updates.get(0)[2];
    extentTest = extent.createTest("Policy Creation Test for " + polNumber);

    for (Object[] update : updates) {
        String nodeName = (String) update[0];
        String attributeValue = (String) update[1];  // TypeCode from TC_Mapping if available
        String nodeValue = (String) update[2];
        String condition = (String) update[3];

        NodeList nodeList = doc.getElementsByTagName(nodeName);

        IntStream.range(0, nodeList.getLength())
                .mapToObj(nodeList::item)
                .filter(node -> node instanceof Element)
                .map(node -> (Element) node)
                .filter(element -> matchesCondition(element, condition))  // Apply condition filtering
                .forEach(element -> {
                    if (attributeValue != null && !attributeValue.isEmpty()) {
                        element.setAttribute("TypeCode", attributeValue);
                        extentTest.log(Status.INFO, "Updated attribute TypeCode of " + nodeName + " with value: " + attributeValue);
                    }
                    if (nodeValue.isEmpty()) {
                        element.setTextContent("");  // Clear the node content if value is empty
                        extentTest.log(Status.INFO, "Cleared value of " + nodeName + " as per test data sheet instruction");
                    } else {
                        element.setTextContent(nodeValue);
                        extentTest.log(Status.INFO, "Updated " + nodeName + " with value: " + nodeValue);
                    }
                });
    }

    File outputDir = new File("output");
    if (!outputDir.exists()) outputDir.mkdir();

    File savedFile = new File(outputDir, polNumber + "_updated.xml");
    Transformer transformer = TransformerFactory.newInstance().newTransformer();
    DOMSource source = new DOMSource(doc);
    StreamResult result = new StreamResult(savedFile);
    transformer.transform(source, result);
    extentTest.log(Status.INFO, "Updated XML saved as: " + savedFile.getPath());

    // Encode XML and create policy via API
    String encodedXML = encodeXMLToBase64(savedFile.getPath());
    extentTest.log(Status.INFO, "Encoded XML to Base64 for policy creation");

    try {
        String policyNumber = createPolicy(token, encodedXML);
        extentTest.log(Status.PASS, "Policy created successfully with Policy Number: " + policyNumber);
    } catch (Exception e) {
        extentTest.log(Status.FAIL, "Policy creation failed: " + e.getMessage());
        throw e;
    }
}

// Helper method to check if an element or its parent/ancestor meets the condition
private boolean matchesCondition(Element element, String condition) {
    if (condition.isEmpty()) {
        return true;
    }
    
    String[] conditionParts = condition.split("=");
    if (conditionParts.length != 2) {
        return false;
    }
    
    String conditionAttribute = conditionParts[0].trim();
    String conditionValue = conditionParts[1].trim();

    Node currentNode = element;
    while (currentNode != null && currentNode.getNodeType() == Node.ELEMENT_NODE) {
        Element currentElement = (Element) currentNode;
        
        if (currentElement.hasAttribute(conditionAttribute) &&
            currentElement.getAttribute(conditionAttribute).equals(conditionValue)) {
            return true;
        }
        currentNode = currentNode.getParentNode();
    }
    return false;
}

private void loadTemplate(String templateName) throws Exception {
    extentTest.log(Status.INFO, "Loading XML template: " + templateName);
    File templateFile = new File(templateDir, templateName);
    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
    factory.setNamespaceAware(true);
    DocumentBuilder builder = factory.newDocumentBuilder();
    doc = builder.parse(templateFile);
    extentTest.log(Status.PASS, "Template loaded successfully");
}
