// ... [Remaining class setup and imports]

public class XMLUpdateTest2 extends WebBase {
    private Document doc;
    public static ExtentReports mainReport;
    public HashMap<String, Integer> testCaseRetryCount = new HashMap<>();
    public String folderPath;
    public String templateDir;
    private String token;

    private static final String WOP_COVERAGE_TEMPLATE =
        "<Coverage id=\"WOP\">" +
        "<ProductCode>WOP</ProductCode>" +
        "<LifeCovTypeCode>WP</LifeCovTypeCode>" +
        "<BenefitCoverage>Base Coverage</BenefitCoverage>" +
        "<LifeParticipant PartyID=\"\">" +
        "<LifeParticipantRoleCode tc=\"1\">Primary Insured</LifeParticipantRoleCode>" +
        "<TobaccoPremiumBasis tc=\"1\">Non-Smoker</TobaccoPremiumBasis>" +
        "<UnderwritingClass tc=\"101\">NS1_01</UnderwritingClass>" +
        "<PermTableRating tc=\"STD\">STD</PermTableRating>" +
        "</LifeParticipant>" +
        "<EffDate>2022-04-22</EffDate>" +
        "<ExpiryDate>2035-04-22</ExpiryDate>" +
        "</Coverage>";

    @BeforeClass
    public void setup() throws Exception {
        // Setup ExtentReports, bearer token, etc.
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HHmmss");
        LocalDateTime now = LocalDateTime.now();
        folderPath = ".//Reports/Functional Test Reports/CreatePolicyWithAPI/Test Report_" + dtf.format(now);
        String fileName = folderPath + "/CreatePolicyWithAPI.html";
        mainReport = new ExtentReports(fileName);
        mainReport.loadConfig(new File(".//Config Files/Functional Test Report-config.xml"));

        token = getBearerToken();
    }

    @Test(dataProvider = "xmlUpdateData", dataProviderClass = fast.dataProviders.ReadDataFromXLSX.class)
    public void updateXML(String testCaseName, String templateName, List<Object[]> updates, ITestContext context) throws Exception {
        if (testCaseRetryCount.get(testCaseName) == null) testCaseRetryCount.put(testCaseName, 1);
        else testCaseRetryCount.put(testCaseName, testCaseRetryCount.get(testCaseName) + 1);

        ExtentReports report = new ExtentReports("dummy.html");
        test = report.startTest("Policy Creation Test for " + testCaseName);
        String polNumber = (String) updates.get(0)[2];
        subTest = report.startTest("Policy Creation Test for " + testCaseName + " with the policy number " + polNumber);

        templateDir = context.getCurrentXmlTest().getParameter("templateDir");
        loadTemplate(templateName, subTest);

        // Add missing coverages if specified by Coverage=WOP or similar conditions
        addMissingCoverages(updates);

        // Update nodes based on test data
        updateNodes(updates);

        // Save and submit the XML
        String updatedFilePath = saveXML(polNumber + "_updated.xml", subTest);
        String encodedXML = encodeXMLToBase64(updatedFilePath);
        subTest.log(LogStatus.PASS, "Encoded XML to Base64");

        // Submit XML for policy creation
        String policyNumber = createPolicy(token, encodedXML, subTest);
        subTest.log(LogStatus.PASS, "Policy created successfully with Policy Number: " + policyNumber);

        test.appendChild(subTest);
        addTestToMainReport(test);
    }

    private void addMissingCoverages(List<Object[]> updates) throws Exception {
        for (Object[] update : updates) {
            String nodeNameCondition = (String) update[0];
            String addCoverageFlag = (String) update[2];

            if (nodeNameCondition.startsWith("Coverage=") && "Yes".equalsIgnoreCase(addCoverageFlag)) {
                String coverageId = nodeNameCondition.split("=")[1];
                if (!coverageExists(coverageId)) {
                    Element newCoverage = createCoverageNode(coverageId);
                    Node lifeNode = doc.getElementsByTagName("Life").item(0);
                    lifeNode.appendChild(newCoverage);
                }
            }
        }
    }

    private boolean coverageExists(String coverageId) {
        NodeList coverages = doc.getElementsByTagName("Coverage");
        for (int i = 0; i < coverages.getLength(); i++) {
            Element coverage = (Element) coverages.item(i);
            if (coverage.getAttribute("id").equals(coverageId)) {
                return true;
            }
        }
        return false;
    }

    private Element createCoverageNode(String coverageId) throws Exception {
        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        Document coverageDoc = builder.parse(new ByteArrayInputStream(WOP_COVERAGE_TEMPLATE.getBytes(StandardCharsets.UTF_8)));
        Element coverageElement = (Element) doc.importNode(coverageDoc.getDocumentElement(), true);
        coverageElement.setAttribute("id", coverageId);
        return coverageElement;
    }

    private void updateNodes(List<Object[]> updates) {
        for (Object[] update : updates) {
            String nodeName = (String) update[0];
            String attributeValue = (String) update[1];
            String nodeValue = (String) update[2];
            String condition = (String) update[3];

            NodeList nodeList = doc.getElementsByTagName(nodeName);
            for (int i = 0; i < nodeList.getLength(); i++) {
                Element element = (Element) nodeList.item(i);
                if (matchesCondition(element, condition)) {
                    if (attributeValue != null && !attributeValue.isEmpty()) {
                        element.setAttribute("tc", attributeValue);
                    }
                    element.setTextContent(nodeValue);
                }
            }
        }
    }

    private boolean matchesCondition(Element element, String condition) {
        return condition.isEmpty() || element.getAttribute("id").equals(condition);
    }

    private String saveXML(String fileName, ExtentTest subTest) throws TransformerException {
        File outputDir = new File("output");
        if (!outputDir.exists()) outputDir.mkdir();

        File savedFile = new File(outputDir, fileName);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes"); // Preserve the exact structure
        transformer.setOutputProperty(OutputKeys.INDENT, "no");

        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(savedFile);
        transformer.transform(source, result);

        return savedFile.getPath();
    }

    // Other helper methods remain as per the previous code...

}
