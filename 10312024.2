package dataprovider;

import org.testng.annotations.DataProvider;
import org.apache.poi.ss.usermodel.*;
import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Map;

public class PolicyDataProvider {

    @DataProvider(name = "policyData")
    public Object[][] getPolicyData() throws Exception {
        Map<String, String> policyData = loadPolicyData("RL_TestData.xlsx", "PolicyData_New");
        Map<String, String> tcMappingData = loadTCMapping("RL_TestData.xlsx", "TC_Mapping");

        // Return as data array compatible with TestNG DataProvider
        return new Object[][]{{policyData, tcMappingData}};
    }

    public Map<String, String> loadPolicyData(String filePath, String sheetName) throws Exception {
        return loadSheetData(filePath, sheetName);
    }

    public Map<String, String> loadTCMapping(String filePath, String sheetName) throws Exception {
        Map<String, String> tcMapping = new HashMap<>();
        FileInputStream file = new FileInputStream(new File(filePath));
        Workbook workbook = WorkbookFactory.create(file);
        Sheet sheet = workbook.getSheet(sheetName);

        for (Row row : sheet) {
            Cell fieldNameCell = row.getCell(0);      // Column for Field Name
            Cell fieldValueCell = row.getCell(1);     // Column for Field Value
            Cell typeCodeCell = row.getCell(2);       // Column for TypeCode

            if (fieldNameCell != null && fieldValueCell != null && typeCodeCell != null) {
                String fieldName = fieldNameCell.getStringCellValue();
                String fieldValue = fieldValueCell.getStringCellValue();
                String typeCode = typeCodeCell.getStringCellValue();

                // Create composite key "FieldName#FieldValue" to store the TypeCode
                String compositeKey = fieldName + "#" + fieldValue;
                tcMapping.put(compositeKey, typeCode);
            }
        }
        workbook.close();
        return tcMapping;
    }

    private Map<String, String> loadSheetData(String filePath, String sheetName) throws Exception {
        Map<String, String> data = new HashMap<>();
        FileInputStream file = new FileInputStream(new File(filePath));
        Workbook workbook = WorkbookFactory.create(file);
        Sheet sheet = workbook.getSheet(sheetName);

        for (Row row : sheet) {
            Cell keyCell = row.getCell(0); // Assuming key is in column 0
            Cell valueCell = row.getCell(1); // Assuming value is in column 1
            if (keyCell != null && valueCell != null) {
                data.put(keyCell.getStringCellValue(), valueCell.getStringCellValue());
            }
        }
        workbook.close();
        return data;
    }
}





package test;

import dataprovider.PolicyDataProvider;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

import java.util.Map;

public class XMLPolicyTest {

    private void updateAttributesFromMapping(Document xmlDoc, Map<String, String> dataRow) throws Exception {
        PolicyDataProvider provider = new PolicyDataProvider();
        Map<String, String> tcMapping = provider.loadTCMapping("RL_TestData.xlsx", "TC_Mapping");

        for (Map.Entry<String, String> entry : dataRow.entrySet()) {
            String fieldName = entry.getKey();
            String fieldValue = entry.getValue();

            // Create composite key for lookup in TC_Mapping
            String compositeKey = fieldName + "#" + fieldValue;

            if (tcMapping.containsKey(compositeKey)) {
                String typeCode = tcMapping.get(compositeKey);
                Node attributeNode = findNode(xmlDoc, fieldName);
                if (attributeNode != null) {
                    NamedNodeMap attributes = attributeNode.getAttributes();
                    if (attributes != null) {
                        Node tcAttribute = attributes.getNamedItem("tc");
                        if (tcAttribute != null) {
                            tcAttribute.setNodeValue(typeCode);
                        }
                    }
                }
            }
        }
    }

    // Other methods remain the same
}
