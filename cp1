import com.nyl.base.WebBase;
import com.nyl.utilities.EnvParameters;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.apache.commons.codec.binary.Base64;
import org.json.JSONObject;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.ITestContext;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

public class CreatePolicyWithAPI_RestAssured extends WebBase {
    public static ExtentReports mainReport;
    public HashMap<String, Integer> testCaseRetryCount = new HashMap<>();
    public String folderPath;

    @BeforeClass(alwaysRun = true)
    public void reportInitialization() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HHmmss");
        LocalDateTime now = LocalDateTime.now();
        folderPath = ".//Reports/Functional Test Reports/CreatePolicyWithAPI/Test Report_" + dtf.format(now);
        String fileName = folderPath + "/CreatePolicyWithAPI.html";
        mainReport = new ExtentReports(fileName);
        mainReport.loadConfig(new File(".//Config Files/Functional Test Report-config.xml"));
    }

    @Test
    public void createPolicy(ITestContext context) throws Exception {
        ExtentTest test = mainReport.startTest("Create Policy");
        ExtentTest subTest = mainReport.startTest("Create Policy Using API Calls");

        try {
            String folderPath = context.getCurrentXmlTest().getParameter("XMLsFolderPath");
            subTest.log(LogStatus.INFO, "Step1: Received the XML folder path: " + folderPath);

            File[] listOfFiles = new File(folderPath).listFiles((dir, name) -> name.toLowerCase().endsWith(".xml"));
            Assert.assertNotNull(listOfFiles, "No XML files found in the directory");
            subTest.log(LogStatus.INFO, "Step2: Capturing all the .xml files from the given folder path");

            String token = getBearerToken(subTest);
            test.appendChild(subTest);

            for (File file : listOfFiles) {
                if (file.isFile()) {
                    subTest = mainReport.startTest("Create Policy Using API Calls for XML: " + file.getName());
                    String encodedXML = encodeXMLToBase64(file.getAbsolutePath());
                    subTest.log(LogStatus.PASS, "XML encoded to Base64");

                    String policyNumber = createPolicy(token, encodedXML);
                    subTest.log(LogStatus.PASS, "Policy created with Policy Number: " + policyNumber);
                    test.appendChild(subTest);
                }
            }
        } catch (Exception e) {
            subTest.log(LogStatus.FAIL, "Exception Occurred - " + e.getMessage());
            Assert.fail();
        } finally {
            mainReport.endTest(test);
        }
    }

    public String getBearerToken(ExtentTest subTest) throws Exception {
        Properties prop = new Properties();
        try (FileInputStream fis = new FileInputStream("config.properties")) {
            prop.load(fis);
        }
        String userID = prop.getProperty("User_Name");
        String password = prop.getProperty("Password");
        subTest.log(LogStatus.INFO, "User ID and Password captured from Config File");

        String payload = "{ \"username\" : \"" + userID + "\", \"password\" : \"" + password + "\" }";
        RestAssured.baseURI = EnvParameters.tokenApiUrl;

        Response response = RestAssured.given()
                .header("Content-Type", "application/json")
                .header("X-API-KEY", EnvParameters.XAPIKEY)
                .body(payload)
                .post();

        Assert.assertEquals(response.getStatusCode(), 200, "Token API response code should be 200");
        String token = new JSONObject(response.asString()).getString("token");
        subTest.log(LogStatus.PASS, "Token generated: " + token);
        return token;
    }

    public String createPolicy(String token, String encodedXML) throws Exception {
        String payload = "{ \"encodedACORDXml\" : \"" + encodedXML + "\" }";
        RestAssured.baseURI = EnvParameters.policyApiUrl;

        Response response = RestAssured.given()
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + token)
                .header("X-API-KEY", EnvParameters.XAPIKEY)
                .body(payload)
                .post();

        Assert.assertEquals(response.getStatusCode(), 200, "Policy creation API response code should be 200");

        String responseBody = response.asString();
        return new JSONObject(responseBody).getJSONObject("PolicyHdr").getJSONObject("PolicyHdrData").getString("PolicyNumber");
    }

    public String encodeXMLToBase64(String filePath) throws Exception {
        File file = new File(filePath);
        try (FileInputStream fis = new FileInputStream(file)) {
            byte[] bytes = fis.readAllBytes();
            return Base64.encodeBase64String(bytes);
        }
    }

    @AfterClass(alwaysRun = true)
    public void tearDown() {
        mainReport.flush();
    }
}






import io.restassured.RestAssured;
import io.restassured.config.SSLConfig;

@BeforeClass(alwaysRun = true)
public void reportInitialization() {
    // Disable SSL validation
    RestAssured.config = RestAssured.config().sslConfig(SSLConfig.sslConfig().relaxedHTTPSValidation());

    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HHmmss");
    LocalDateTime now = LocalDateTime.now();
    folderPath = ".//Reports/Functional Test Reports/CreatePolicyWithAPI/Test Report_" + dtf.format(now);
    String fileName = folderPath + "/CreatePolicyWithAPI.html";
    mainReport = new ExtentReports(fileName);
    mainReport.loadConfig(new File(".//Config Files/Functional Test Report-config.xml"));
}
